# Makefile para compilar IFT e processador de imagens no Windows
# Baseado no Makefile funcional original

# Diret√≥rios - DEFINIR PRIMEIRO!
SRC_DIR := src
INC_DIR := include
BUILD_DIR := build
OPENCV_DIR := third_party/opencv

# Arquivos fonte espec√≠ficos do IFT (ATUALIZADOS com nova estrutura)
IFT_SOURCES := $(SRC_DIR)/ift/data_structures/pixel.cpp \
               $(SRC_DIR)/ift/data_structures/image.cpp \
               $(SRC_DIR)/ift/data_structures/seed_set.cpp \
               $(SRC_DIR)/ift/algorithms/path_cost_function.cpp \
               $(SRC_DIR)/ift/ift_result.cpp \
               $(SRC_DIR)/ift/algorithms/ift_algorithm.cpp \
               $(SRC_DIR)/ift/data_structures/bucket_queue.cpp \
               $(SRC_DIR)/ift/algorithms/ift_optimized_algorithm.cpp \
               $(SRC_DIR)/utils/opencv_ift_bridge.cpp \
               $(SRC_DIR)/ift_image_processor.cpp

# Target principal
TARGET := ift_image_processor.exe

# Configura√ß√£o do compilador
CXX := g++
CXXFLAGS := -Wall -Wextra -std=c++17 -O2 -g \
    -I$(INC_DIR) \
    -I$(OPENCV_DIR)/include

# Linkagem CORRETA (mesmo padr√£o do Makefile funcional)
LDFLAGS := -L$(OPENCV_DIR)/x64/mingw/lib \
    -lopencv_core455 \
    -lopencv_imgproc455 \
    -lopencv_imgcodecs455 \
    -lopencv_highgui455

# Regra principal
all: $(TARGET)

# Como gerar o bin√°rio (mesmo padr√£o do Makefile funcional)
$(TARGET): $(IFT_SOURCES)
	@if not exist $(BUILD_DIR) mkdir $(BUILD_DIR)
	$(CXX) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

# Limpar
clean:
	@if exist $(BUILD_DIR) rmdir /s /q $(BUILD_DIR)
	@if exist $(TARGET) del $(TARGET)
	@if exist test_simple.exe del test_simple.exe

# Limpar e recompilar
rebuild: clean all

# Testes com PATH configurado
test: $(TARGET)
	@echo "Executando teste com imagem automatica..."
	@set PATH=%PATH%;$(OPENCV_DIR)\x64\mingw\bin && .\$(TARGET) $(SRC_DIR)\images\imagem1.png -a 4 -o teste_imagem1.png
	@echo "Teste concluido!"

test_interactive: $(TARGET)
	@echo "Executando teste interativo..."
	@set PATH=%PATH%;$(OPENCV_DIR)\x64\mingw\bin && .\$(TARGET) $(SRC_DIR)\images\imagem2.png -i -s -o teste_interativo.png

test_optimized: $(TARGET)
	@echo "Testando algoritmo otimizado..."
	@set PATH=%PATH%;$(OPENCV_DIR)\x64\mingw\bin && .\$(TARGET) $(SRC_DIR)\images\imagem3.jpg -a 6 -opt -s -o teste_otimizado.png

# Execu√ß√£o manual
run: $(TARGET)
	@echo "Para executar manualmente:"
	@echo "set PATH=%%PATH%%;$(OPENCV_DIR)\x64\mingw\bin"
	@echo ".\$(TARGET) <imagem> [opcoes]"

help:
	@echo "üéØ PROJETO IFT - TARGETS DISPON√çVEIS:"
	@echo ""
	@echo "üì¶ EXECUT√ÅVEIS:"
	@echo "  all          - Compila processador IFT principal"
	@echo "  clean        - Remove arquivos compilados"
	@echo "  rebuild      - Limpa e recompila"
	@echo ""
	@echo "üß™ TESTES:"
	@echo "  test         - Teste autom√°tico com imagem1"
	@echo "  test_interactive - Teste interativo com imagem2"  
	@echo "  test_optimized   - Teste otimizado com imagem3"
	@echo ""
	@echo "üõ†Ô∏è UTILIT√ÅRIOS:"
	@echo "  run          - Mostra como executar"
	@echo "  help         - Mostra esta ajuda"

.PHONY: all clean rebuild test test_interactive test_optimized run help 